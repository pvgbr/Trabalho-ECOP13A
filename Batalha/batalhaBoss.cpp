#include "batalhaBoss.h"
#include <bits/stdc++.h>

using namespace std;

BatalhaBoss::BatalhaBoss(Jogador* player, Boss& bossRef)
    : Batalha(player), boss(bossRef), jogadorDefendendo(false) {}

bool BatalhaBoss::batalhar() {
    bool usouGolpeDuplo = false;
    bool usouAtaqueGelo = false;
    bool bossCongelado = false;
    int turno = 1;
    system("cls");

    cout << R"(

================ BATALHA FINAL =================
        _.-^^---....,,--        
    _--                  --_   
   <                        >)
   |  BOSS FINAL APARECEU!  | 
    \._                   _./ 
       ```--. . , ; .--'''    
             | |   |          
          .-=||  | |=-.       
          `-=#$%&%$#=-'       
             | ;  :|          
    _____.,-#%&$@%#&#~,._____

)";
    cout << "\nO Boss ruge: 'Voc√™ chegou longe, mas aqui ser√° seu fim! Prepare-se para o verdadeiro poder! üê≤'\n";
    cout << "\nPressione Enter para come√ßar a batalha... ‚öîÔ∏è";
    cin.ignore();

    while (player->estaVivo() && boss.estaVivo()) {
        system("cls");
        cout << "\n========= TURNO " << turno << " =========\n";
        // RESUMO VISUAL DOS STATUS
        cout << "================== STATUS ==================" << endl;
        cout << "üëë Boss:  " << boss.getNome() << endl;
        cout << "   Vida:  ";
        int vidaBoss = boss.getVida();
        int vidaBossMax = 200; // Valor simb√≥lico, ajuste se necess√°rio
        int barraBoss = (vidaBoss * 20) / vidaBossMax;
        cout << "[";
        for(int i=0;i<20;i++) cout << (i<barraBoss?"‚ñà":" ");
        cout << "] " << vidaBoss << " ‚ù§Ô∏è" << endl;
        cout << "   For√ßa: " << boss.getForca() << " üí™   Defesa: " << boss.getDefesa() << " üõ°Ô∏è" << endl;
        cout << "-------------------------------------------" << endl;
        cout << "üßë‚Äçüé§ Jogador: " << player->getNome() << endl;
        cout << "   Vida:  ";
        int vidaPlayer = player->getVida();
        int vidaPlayerMax = 100; // Valor simb√≥lico, ajuste se necess√°rio
        int barraPlayer = (vidaPlayer * 20) / vidaPlayerMax;
        cout << "[";
        for(int i=0;i<20;i++) cout << (i<barraPlayer?"‚ñà":" ");
        cout << "] " << vidaPlayer << " ‚ù§Ô∏è" << endl;
        cout << "   For√ßa: " << player->getForca() << " (+" << player->getBonusAtaqueEquipado() << ") üí™   Defesa: " << player->getDefesa() << " (+" << player->getBonusDefesaEquipado() << ") üõ°Ô∏è" << endl;
        cout << "   Dinheiro: " << player->getDinheiro() << " üí∞" << endl;
        cout << "===========================================\n" << endl;

        // TURNO DO JOGADOR
        if (!bossCongelado) {
            // Reduz durabilidade dos equipamentos a cada turno
            player->reduzirDurabilidadeEquipamentos();
            
            cout << "Sua vez! Escolha sua a√ß√£o:\n";
            cout << "1 - Atacar\n";
            cout << "2 - Defender (reduz dano do pr√≥ximo ataque)\n";
            cout << "3 - Usar Habilidade\n";
            cout << "4 - Usar Consum√≠vel\n";
            int acao = 0;
            while (!(cin >> acao) || acao < 1 || acao > 4) {
                cout << "Op√ß√£o inv√°lida! Escolha 1-4: ";
                cin.clear();
                cin.ignore();
            }
            cin.ignore();
            switch (acao) {
                case 1: { // Atacar
                    int dano = player->getForca() + player->getBonusAtaqueEquipado() + (rand() % 6);
                    boss.alterarVida(-dano);
                    cout << "\nüí• Voc√™ salta e desfere um golpe poderoso no Boss! üí•\n";
                    cout << "üî• Dano causado: " << dano << "! üî•\n";
                    cout << "-----------------------------" << endl;
                    break;
                }
                case 2: { // Defender
                    jogadorDefendendo = true;
                    cout << "\nüõ°Ô∏è Voc√™ ergue seu escudo e se prepara para o impacto! Defesa ativada! üõ°Ô∏è\n";
                    cout << "-----------------------------" << endl;
                    break;
                }
                case 3: { // Usar Habilidade
                    cout << "Escolha a habilidade:\n";
                    if (!usouGolpeDuplo) cout << "  1 - Golpe Duplo (Ataca duas vezes) üí•" << endl;
                    else cout << "  1 - Golpe Duplo (J√Å USADO)" << endl;
                    if (!usouAtaqueGelo) cout << "  2 - Ataque de Gelo (Pode congelar o Boss) ‚ùÑÔ∏è" << endl;
                    else cout << "  2 - Ataque de Gelo (J√Å USADO)" << endl;
                    int hab = 0;
                    while (!(cin >> hab) || hab < 1 || hab > 2) {
                        cout << "Escolha inv√°lida! Digite 1 ou 2: ";
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    }
                    cin.ignore();
                    if (hab == 1 && usouGolpeDuplo) {
                        cout << "Voc√™ j√° usou Golpe Duplo nesta batalha!" << endl;
                        break;
                    }
                    if (hab == 2 && usouAtaqueGelo) {
                        cout << "Voc√™ j√° usou Ataque de Gelo nesta batalha!" << endl;
                        break;
                    }
                    if (hab == 1) {
                        cout << "\nüí•üí• Voc√™ executa o GOLPE DUPLO! Dois ataques r√°pidos atingem o Boss! üí•üí•\n";
                        player->usarHabilidade(HabilidadeJogador::GOLPE_DUPLO, &boss);
                        usouGolpeDuplo = true;
                        cout << "-----------------------------" << endl;
                    } else if (hab == 2) {
                        cout << "\n‚ùÑÔ∏è Voc√™ canaliza energia e lan√ßa o ATAQUE DE GELO! ‚ùÑÔ∏è\n";
                        auto resultado = player->usarHabilidade(HabilidadeJogador::ATAQUE_GELO, &boss);
                        usouAtaqueGelo = true;
                        if (resultado.second) {
                            bossCongelado = true;
                            cout << R"(
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà        ‚ñà‚ñà
 ‚ñà‚ñà  BOSS    ‚ñà‚ñà
 ‚ñà‚ñà CONGELADO ‚ñà‚ñà
  ‚ñà‚ñà        ‚ñà‚ñà
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
)";
                            cout << "O Boss foi CONGELADO e perder√° o pr√≥ximo turno! üßä\n";
                        }
                        cout << "-----------------------------" << endl;
                    }
                    break;
                }
                case 4: { // Usar Consum√≠vel
                    player->mostrarConsumiveisBatalha();
                    cout << "Escolha o n√∫mero do consum√≠vel para usar (0 para cancelar): ";
                    int idx;
                    cin >> idx;
                    cin.ignore();
                    if (idx > 0) {
                        if (!player->usarConsumivelBatalha(idx - 1)) {
                            cout << "N√£o foi poss√≠vel usar o consum√≠vel!" << endl;
                        } else {
                            cout << "\nüß™ Voc√™ usou um consum√≠vel! Energia restaurada! üß™\n";
                        }
                    } else {
                        cout << "A√ß√£o cancelada." << endl;
                    }
                    cout << "-----------------------------" << endl;
                    break;
                }
            }
            cout << "\nPressione Enter para continuar... üëâ üëâ";
            cin.ignore();
        } else {
            cout << R"(
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà        ‚ñà‚ñà
 ‚ñà‚ñà  BOSS    ‚ñà‚ñà
 ‚ñà‚ñà CONGELADO ‚ñà‚ñà
  ‚ñà‚ñà        ‚ñà‚ñà
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
)";
            cout << "O Boss est√° congelado e perde o turno! üßä\n";
            bossCongelado = false;
            cout << "\nPressione Enter para continuar... üëâ üëâ";
            cin.ignore();
            turno++;
            continue;
        }

        // CHECA VIT√ìRIA ANTES DO TURNO DO BOSS
        if (!boss.estaVivo()) {
            cout << "\nVOC√ä DERROTOU O BOSS FINAL! O reino est√° salvo! üèÜ\n";
            cout << "Frase final do Boss: '" << boss.getFraseFinal() << "'\n";
            cout << R"(

   * * * * * * * * * * * * * * * * * * * *
  *   PARAB√âNS, HER√ìI! VOC√ä VENCEU!     *
   * * * * * * * * * * * * * * * * * * * *
)";
            cout << "\nPressione Enter para encerrar a batalha... ü•á";
            cin.ignore();
            return true;
        }

        // TURNO DO BOSS
        system("cls");
        cout << "\n========= TURNO " << turno << " (Boss) =========\n";
        // RESUMO VISUAL DOS STATUS
        cout << "================== STATUS ==================" << endl;
        cout << "üëë Boss:  " << boss.getNome() << endl;
        cout << "   Vida:  ";
        vidaBoss = boss.getVida();
        barraBoss = (vidaBoss * 20) / vidaBossMax;
        cout << "[";
        for(int i=0;i<20;i++) cout << (i<barraBoss?"‚ñà":" ");
        cout << "] " << vidaBoss << " ‚ù§Ô∏è" << endl;
        cout << "   For√ßa: " << boss.getForca() << " üí™   Defesa: " << boss.getDefesa() << " üõ°Ô∏è" << endl;
        cout << "-------------------------------------------" << endl;
        cout << "üßë‚Äçüé§ Jogador: " << player->getNome() << endl;
        cout << "   Vida:  ";
        vidaPlayer = player->getVida();
        barraPlayer = (vidaPlayer * 20) / vidaPlayerMax;
        cout << "[";
        for(int i=0;i<20;i++) cout << (i<barraPlayer?"‚ñà":" ");
        cout << "] " << vidaPlayer << " ‚ù§Ô∏è" << endl;
        cout << "   For√ßa: " << player->getForca() << " (+" << player->getBonusAtaqueEquipado() << ") üí™   Defesa: " << player->getDefesa() << " (+" << player->getBonusDefesaEquipado() << ") üõ°Ô∏è" << endl;
        cout << "   Dinheiro: " << player->getDinheiro() << " üí∞" << endl;
        cout << "===========================================\n" << endl;
        cout << "Turno do Boss! üê≤\n";
        int acaoBoss = rand() % 100;
        if (acaoBoss < 50) { // Ataque normal (50%)
            int dano = boss.getForca() + (rand() % 8);
            if (jogadorDefendendo) {
                dano /= 2;
                cout << "üõ°Ô∏è Voc√™ defendeu! O dano foi reduzido pela metade! üõ°Ô∏è\n";
            }
            player->alterarVida(-dano);
            cout << "üòà O Boss desfere um ataque brutal! Voc√™ recebe " << dano << " de dano! üí¢\n";
            cout << "-----------------------------" << endl;
        } else if (acaoBoss < 70) { // Ataque Especial (20%)
            int dano = boss.ataqueEspecial();
            if (jogadorDefendendo) {
                dano /= 2;
                cout << "üõ°Ô∏è Voc√™ defendeu! O dano foi reduzido pela metade! üõ°Ô∏è\n";
            }
            player->alterarVida(-dano);
            cout << "üî• O Boss usa um ATAQUE ESPECIAL! Voc√™ recebe " << dano << " de dano! üî•\n";
            cout << "-----------------------------" << endl;
        } else if (acaoBoss < 85) { // RAIO ANIQUILADOR (15%)
            cout << R"(
   ‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°
)";
            int dano = boss.getForca() + (rand() % 21);
            if (jogadorDefendendo) {
                dano /= 2;
                cout << "üõ°Ô∏è Voc√™ defendeu! O dano foi reduzido pela metade! üõ°Ô∏è\n";
            }
            cout << "‚ö° O Boss canaliza energia e dispara o RAIO ANIQUILADOR! Voc√™ recebe " << dano << " de dano devastador! ‚ö°\n";
            player->alterarVida(-dano);
            cout << "-----------------------------" << endl;
        } else { // REGENERA√á√ÉO DRAG√îNICA (15%)
            int vidaAntes = boss.getVida();
            boss.usarHabilidade(HabilidadeBoss::REGENERACAO_DRAGONICA);
            int vidaDepois = boss.getVida();
            cout << "üß¨ O Boss ativa REGENERA√á√ÉO DRAG√îNICA! Recuperou " << (vidaDepois - vidaAntes) << " de vida! üß¨\n";
            cout << "-----------------------------" << endl;
        }
        jogadorDefendendo = false;
        cout << "\nPressione Enter para continuar... üëâ üëâ";
        cin.ignore();

        // CHECA DERROTA
        if (!player->estaVivo()) {
            cout << R"(

   X X X X X X X X X X X X X X X X X X X X
  X         VOC√ä FOI DERROTADO...        X
   X X X X X X X X X X X X X X X X X X X X
)";
            cout << "\nO Boss triunfa e o reino cai nas trevas... üíÄ\n";
            cout << "\nPressione Enter para encerrar a batalha... üëâ";
            cin.ignore();
            return false;
        }
        turno++;
    }
    return false;
} 